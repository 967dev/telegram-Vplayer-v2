let db;
function initDB(callback){const request=indexedDB.open("musicPlayerDB_tg",1);request.onerror=a=>console.error("Database error:",a.target.errorCode),request.onupgradeneeded=a=>{a.target.result.createObjectStore("tracks",{keyPath:"id",autoIncrement:!0})},request.onsuccess=a=>{db=a.target.result,callback&&callback()}}function saveTrackToDB(a,b){const c=db.transaction(["tracks"],"readwrite"),d=c.objectStore("tracks"),e={file:a,fileName:a.name.replace(/\.[^/.]+$/,""),artistName:"Local File"};d.add(e).onsuccess=a=>{const c={id:a.target.result,fileName:e.fileName,artistName:e.artistName};b&&b(c)}}function loadPlaylistFromDB(a){if(!db)return;const b=db.transaction("tracks","readonly"),c=b.objectStore("tracks");c.getAll().onsuccess=b=>{const c=b.target.result.map(({id:a,fileName:b,artistName:c})=>({id:a,fileName:b,artistName:c}));a&&a(c)}}function getTrackFileFromDB(a,b){if(!db)return;const c=db.transaction("tracks","readonly"),d=c.objectStore("tracks");d.get(a).onsuccess=a=>{b&&b(a.target.result.file)}}function deleteTrackFromDB(a,b){if(!db)return;const c=db.transaction(["tracks"],"readwrite"),d=c.objectStore("tracks");d.delete(a).onsuccess=()=>{b&&b()}}export{initDB,saveTrackToDB,loadPlaylistFromDB,getTrackFileFromDB,deleteTrackFromDB};
